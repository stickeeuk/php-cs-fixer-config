<?php

namespace Stickee\PhpCsFixerConfig\CustomFixers;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Tokens;

class NotOperatorWithSuccessorSpaceFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    /**
     * @inheritdoc
     */
    public function getName(): string
    {
        return 'Stickee/not_operator_with_successor_space';
    }

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Logical NOT operators (`!`) should have one trailing whitespace.',
            [
                new CodeSample(
                    '<?php

if ( ! $bar) {
    echo "Help!";
}
'
                ),
                new CodeSample(
                    '<?php

if ( !$bar) {
    echo "Help!";
}
',
                    ['space' => 'none']
                ),
            ]
        );
    }

    /**
     * {@inheritdoc}
     *
     * Must run after ModernizeStrposFixer, UnaryOperatorSpacesFixer.
     */
    public function getPriority(): int
    {
        return -10;
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isTokenKindFound('!');
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        for ($index = $tokens->count() - 1; $index >= 0; $index--) {
            $token = $tokens[$index];

            if ($token->equals('!')) {
                if ($this->configuration['space'] === 'one') {
                    $this->addSpace($tokens, $index);
                }

                if ($this->configuration['space'] === 'none') {
                    $this->removeSpace($tokens, $index);
                }
            }
        }
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('space', 'Spacing to apply after not operator.'))
                ->setAllowedValues(['one', 'none'])
                ->setDefault('one')
                ->getOption(),
        ]);
    }

    private function removeSpace(Tokens $tokens, int $index): void
    {
        if ($tokens[$index + 1]->isWhitespace()) {
            $tokens->clearAt($index + 1);
        }
    }

    private function addSpace(Tokens $tokens, int $index): void
    {
        $tokens->ensureWhitespaceAtIndex($index + 1, 0, ' ');
    }
}
